{"version":3,"sources":["api/index.js","Components/Quote/Quote.js","Components/ListQuote/ListQuote.js","App.js","index.js"],"names":["url","fetchRandomQuote","a","axios","get","catch","err","data","modifiedData","quoteAuthor","quote","quoteGenre","quoteText","_id","status","console","log","fetchAuthorQuotes","authorName","replace","quotes","map","element","Quote","isQuote","setisQuote","listQuote","setlistQuote","changeToListQuote","Array","isArray","length","className","onClick","ListQuote","key","App","useState","setQuote","useEffect","handleRequestRandom","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8ec2bc38.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst url = \"https://quote-garden.herokuapp.com/api/v2\";\r\nexport const fetchRandomQuote = async () => {\r\n    try {\r\n        const data = await axios.get(`${url}/quotes/random`).catch(\r\n            function(err) {\r\n                return err;\r\n            }\r\n        )\r\n        const modifiedData = {\r\n            quoteAuthor: data.data.quote.quoteAuthor,\r\n            quoteGenre: data.data.quote.quoteGenre,\r\n            quoteText: data.data.quote.quoteText,\r\n            _id: data.data.quote._id,\r\n            status: data.status\r\n        }\r\n        return modifiedData;\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nexport const fetchAuthorQuotes = async (authorName) => {\r\n    try {\r\n        const data = await axios.get(`${url}/authors/${authorName.replace(' ', '%20')}?page=1&limit=10`).catch(\r\n            function(err) {\r\n                return err;\r\n            }\r\n        )\r\n        const modifiedData = data.data.quotes.map((element) => {\r\n            return(element);\r\n        });\r\n        return modifiedData;\r\n    }\r\n    catch (err) {\r\n        console.log(err);\r\n    }\r\n}","import React, { useRef } from 'react';\r\nimport './Quote.css';\r\n\r\nconst Quote = ({ quote, isQuote, setisQuote, listQuote, setlistQuote, fetchAuthorQuotes }) => {\r\n    \r\n    const changeToListQuote = async () => {\r\n        if(Array.isArray(listQuote) && !listQuote.length) {\r\n            const data = await fetchAuthorQuotes(quote.quoteAuthor);\r\n            setlistQuote(data);\r\n        }\r\n        setisQuote(!isQuote);\r\n    }\r\n\r\n    return (\r\n        <div className=\"quote\"> \r\n            <div className=\"quote--text\">\r\n                <p>{quote.quoteText}</p>\r\n            </div>\r\n\r\n            <div className=\"quote--author\"\r\n                onClick={changeToListQuote}\r\n            >\r\n                <div>\r\n                    <p className=\"quote--author_name\">{quote.quoteAuthor}</p>\r\n                    <p className=\"quote--author_genre\">{quote.quoteGenre}</p>\r\n                </div>\r\n                <div>\r\n                    <span className=\"material-icons\">\r\n                        arrow_right_alt\r\n                    </span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Quote;","import React from 'react';\r\nimport './ListQuote.css';\r\n\r\nconst ListQuote = ({ isQuote, setisQuote, listQuote}) => {\r\n    const handleChangeToQuote = () => {\r\n        setisQuote(!isQuote);\r\n    }\r\n\r\n    return (\r\n        <div className=\"listQuote\">\r\n            <div className=\"listQuote--heading\">\r\n                <span className=\"material-icons\" onClick={handleChangeToQuote}>\r\n                    keyboard_backspace\r\n                </span>\r\n                <h1>{listQuote[0].quoteAuthor}</h1> \r\n            </div>\r\n            {listQuote.map((quote) => {\r\n                return (\r\n                    <div className=\"quote\" key={quote._id}> \r\n                        <div className=\"quote--text\">\r\n                            <p>{quote.quoteText}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListQuote;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { fetchRandomQuote, fetchAuthorQuotes } from './api';\nimport { Quote, ListQuote } from './Components'\n\nfunction App() {\n  const [quote, setQuote] = useState({});\n  const [listQuote, setlistQuote] = useState([]);\n  const [isQuote, setisQuote] = useState(true);\n\n  useEffect(() => {\n    handleRequestRandom();\n  }, []);\n\n  const handleRequestRandom = async () => {\n    const data = await fetchRandomQuote();\n    if(data.status === 200) {\n      setQuote({\n        quoteAuthor: data.quoteAuthor,\n        quoteGenre: data.quoteGenre,\n        quoteText: data.quoteText,\n        _id: data._id\n      });\n    }\n    setisQuote(true);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"btn\">\n        <button onClick={handleRequestRandom}\n          className=\"random-btn\"\n        >\n          random \n          <span className=\"material-icons\">\n            autorenew\n          </span>\n        </button>\n      </div>\n      { isQuote ? (\n        <Quote \n          quote={quote} isQuote={isQuote} setisQuote={setisQuote}\n          listQuote={listQuote} setlistQuote={setlistQuote}\n          fetchAuthorQuotes={fetchAuthorQuotes}\n        />\n      )\n       : (\n        <ListQuote \n          isQuote={isQuote} setisQuote={setisQuote}\n          listQuote={listQuote}\n        />\n       )\n       }\n       \n       <div className=\"copyright\">\n         Grey@DevChallenges.io\n       </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}